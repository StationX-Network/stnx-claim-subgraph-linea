// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AirdropClaimed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AirdropClaimed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AirdropClaimed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AirdropClaimed", id.toString(), this);
    }
  }

  static load(id: string): AirdropClaimed | null {
    return changetype<AirdropClaimed | null>(store.get("AirdropClaimed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimContract(): Bytes {
    let value = this.get("claimContract");
    return value!.toBytes();
  }

  set claimContract(value: Bytes) {
    this.set("claimContract", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get claimableAmount(): BigInt {
    let value = this.get("claimableAmount");
    return value!.toBigInt();
  }

  set claimableAmount(value: BigInt) {
    this.set("claimableAmount", Value.fromBigInt(value));
  }

  get airdropAmount(): BigInt {
    let value = this.get("airdropAmount");
    return value!.toBigInt();
  }

  set airdropAmount(value: BigInt) {
    this.set("airdropAmount", Value.fromBigInt(value));
  }
}

export class ChangeClaimAmountDetails extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ChangeClaimAmountDetails entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChangeClaimAmountDetails must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChangeClaimAmountDetails", id.toString(), this);
    }
  }

  static load(id: string): ChangeClaimAmountDetails | null {
    return changetype<ChangeClaimAmountDetails | null>(
      store.get("ChangeClaimAmountDetails", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimContract(): Bytes {
    let value = this.get("claimContract");
    return value!.toBytes();
  }

  set claimContract(value: Bytes) {
    this.set("claimContract", Value.fromBytes(value));
  }

  get claimAmountDetails_isMaxClaimable(): boolean {
    let value = this.get("claimAmountDetails_isMaxClaimable");
    return value!.toBoolean();
  }

  set claimAmountDetails_isMaxClaimable(value: boolean) {
    this.set("claimAmountDetails_isMaxClaimable", Value.fromBoolean(value));
  }

  get claimAmountDetails_maxClaimable(): BigInt {
    let value = this.get("claimAmountDetails_maxClaimable");
    return value!.toBigInt();
  }

  set claimAmountDetails_maxClaimable(value: BigInt) {
    this.set("claimAmountDetails_maxClaimable", Value.fromBigInt(value));
  }

  get claimAmountDetails_totalClaimAmount(): BigInt {
    let value = this.get("claimAmountDetails_totalClaimAmount");
    return value!.toBigInt();
  }

  set claimAmountDetails_totalClaimAmount(value: BigInt) {
    this.set("claimAmountDetails_totalClaimAmount", Value.fromBigInt(value));
  }

  get claimAmountDetails_tokenIds(): Array<BigInt> {
    let value = this.get("claimAmountDetails_tokenIds");
    return value!.toBigIntArray();
  }

  set claimAmountDetails_tokenIds(value: Array<BigInt>) {
    this.set("claimAmountDetails_tokenIds", Value.fromBigIntArray(value));
  }
}

export class ChangeCooldownDetails extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ChangeCooldownDetails entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChangeCooldownDetails must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChangeCooldownDetails", id.toString(), this);
    }
  }

  static load(id: string): ChangeCooldownDetails | null {
    return changetype<ChangeCooldownDetails | null>(
      store.get("ChangeCooldownDetails", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimContract(): Bytes {
    let value = this.get("claimContract");
    return value!.toBytes();
  }

  set claimContract(value: Bytes) {
    this.set("claimContract", Value.fromBytes(value));
  }

  get cooldownDetails_hasCooldownPeriod(): boolean {
    let value = this.get("cooldownDetails_hasCooldownPeriod");
    return value!.toBoolean();
  }

  set cooldownDetails_hasCooldownPeriod(value: boolean) {
    this.set("cooldownDetails_hasCooldownPeriod", Value.fromBoolean(value));
  }

  get cooldownDetails_cooldownPeriod(): BigInt {
    let value = this.get("cooldownDetails_cooldownPeriod");
    return value!.toBigInt();
  }

  set cooldownDetails_cooldownPeriod(value: BigInt) {
    this.set("cooldownDetails_cooldownPeriod", Value.fromBigInt(value));
  }
}

export class ChangeRollbackAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ChangeRollbackAddress entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChangeRollbackAddress must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChangeRollbackAddress", id.toString(), this);
    }
  }

  static load(id: string): ChangeRollbackAddress | null {
    return changetype<ChangeRollbackAddress | null>(
      store.get("ChangeRollbackAddress", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimContract(): Bytes {
    let value = this.get("claimContract");
    return value!.toBytes();
  }

  set claimContract(value: Bytes) {
    this.set("claimContract", Value.fromBytes(value));
  }

  get newAddress(): Bytes {
    let value = this.get("newAddress");
    return value!.toBytes();
  }

  set newAddress(value: Bytes) {
    this.set("newAddress", Value.fromBytes(value));
  }
}

export class ChangeRoot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChangeRoot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChangeRoot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChangeRoot", id.toString(), this);
    }
  }

  static load(id: string): ChangeRoot | null {
    return changetype<ChangeRoot | null>(store.get("ChangeRoot", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimContract(): Bytes {
    let value = this.get("claimContract");
    return value!.toBytes();
  }

  set claimContract(value: Bytes) {
    this.set("claimContract", Value.fromBytes(value));
  }

  get newRoot(): Bytes {
    let value = this.get("newRoot");
    return value!.toBytes();
  }

  set newRoot(value: Bytes) {
    this.set("newRoot", Value.fromBytes(value));
  }
}

export class ChangeStartAndEndTime extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ChangeStartAndEndTime entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChangeStartAndEndTime must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChangeStartAndEndTime", id.toString(), this);
    }
  }

  static load(id: string): ChangeStartAndEndTime | null {
    return changetype<ChangeStartAndEndTime | null>(
      store.get("ChangeStartAndEndTime", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimContract(): Bytes {
    let value = this.get("claimContract");
    return value!.toBytes();
  }

  set claimContract(value: Bytes) {
    this.set("claimContract", Value.fromBytes(value));
  }

  get newStartTime(): BigInt {
    let value = this.get("newStartTime");
    return value!.toBigInt();
  }

  set newStartTime(value: BigInt) {
    this.set("newStartTime", Value.fromBigInt(value));
  }

  get newEndTime(): BigInt {
    let value = this.get("newEndTime");
    return value!.toBigInt();
  }

  set newEndTime(value: BigInt) {
    this.set("newEndTime", Value.fromBigInt(value));
  }
}

export class ClaimContractDeployed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ClaimContractDeployed entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ClaimContractDeployed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ClaimContractDeployed", id.toString(), this);
    }
  }

  static load(id: string): ClaimContractDeployed | null {
    return changetype<ClaimContractDeployed | null>(
      store.get("ClaimContractDeployed", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimSettings_creatorAddress(): Bytes {
    let value = this.get("claimSettings_creatorAddress");
    return value!.toBytes();
  }

  set claimSettings_creatorAddress(value: Bytes) {
    this.set("claimSettings_creatorAddress", Value.fromBytes(value));
  }

  get claimSettings_walletAddress(): Bytes {
    let value = this.get("claimSettings_walletAddress");
    return value!.toBytes();
  }

  set claimSettings_walletAddress(value: Bytes) {
    this.set("claimSettings_walletAddress", Value.fromBytes(value));
  }

  get claimSettings_airdropToken(): Bytes {
    let value = this.get("claimSettings_airdropToken");
    return value!.toBytes();
  }

  set claimSettings_airdropToken(value: Bytes) {
    this.set("claimSettings_airdropToken", Value.fromBytes(value));
  }

  get claimSettings_daoToken(): Bytes {
    let value = this.get("claimSettings_daoToken");
    return value!.toBytes();
  }

  set claimSettings_daoToken(value: Bytes) {
    this.set("claimSettings_daoToken", Value.fromBytes(value));
  }

  get claimSettings_hasAllowanceMechanism(): boolean {
    let value = this.get("claimSettings_hasAllowanceMechanism");
    return value!.toBoolean();
  }

  set claimSettings_hasAllowanceMechanism(value: boolean) {
    this.set("claimSettings_hasAllowanceMechanism", Value.fromBoolean(value));
  }

  get claimSettings_isNFT(): boolean {
    let value = this.get("claimSettings_isNFT");
    return value!.toBoolean();
  }

  set claimSettings_isNFT(value: boolean) {
    this.set("claimSettings_isNFT", Value.fromBoolean(value));
  }

  get claimSettings_nftTotalSupply(): BigInt {
    let value = this.get("claimSettings_nftTotalSupply");
    return value!.toBigInt();
  }

  set claimSettings_nftTotalSupply(value: BigInt) {
    this.set("claimSettings_nftTotalSupply", Value.fromBigInt(value));
  }

  get claimSettings_isEnabled(): boolean {
    let value = this.get("claimSettings_isEnabled");
    return value!.toBoolean();
  }

  set claimSettings_isEnabled(value: boolean) {
    this.set("claimSettings_isEnabled", Value.fromBoolean(value));
  }

  get claimSettings_startTime(): BigInt {
    let value = this.get("claimSettings_startTime");
    return value!.toBigInt();
  }

  set claimSettings_startTime(value: BigInt) {
    this.set("claimSettings_startTime", Value.fromBigInt(value));
  }

  get claimSettings_endTime(): BigInt {
    let value = this.get("claimSettings_endTime");
    return value!.toBigInt();
  }

  set claimSettings_endTime(value: BigInt) {
    this.set("claimSettings_endTime", Value.fromBigInt(value));
  }

  get claimSettings_rollbackAddress(): Bytes {
    let value = this.get("claimSettings_rollbackAddress");
    return value!.toBytes();
  }

  set claimSettings_rollbackAddress(value: Bytes) {
    this.set("claimSettings_rollbackAddress", Value.fromBytes(value));
  }

  get claimSettings_merkleRoot(): Bytes {
    let value = this.get("claimSettings_merkleRoot");
    return value!.toBytes();
  }

  set claimSettings_merkleRoot(value: Bytes) {
    this.set("claimSettings_merkleRoot", Value.fromBytes(value));
  }

  get claimSettings_permission(): i32 {
    let value = this.get("claimSettings_permission");
    return value!.toI32();
  }

  set claimSettings_permission(value: i32) {
    this.set("claimSettings_permission", Value.fromI32(value));
  }

  get claimSettings_claimAmountDetails_isMaxClaimable(): boolean {
    let value = this.get("claimSettings_claimAmountDetails_isMaxClaimable");
    return value!.toBoolean();
  }

  set claimSettings_claimAmountDetails_isMaxClaimable(value: boolean) {
    this.set(
      "claimSettings_claimAmountDetails_isMaxClaimable",
      Value.fromBoolean(value)
    );
  }

  get claimSettings_claimAmountDetails_maxClaimable(): BigInt {
    let value = this.get("claimSettings_claimAmountDetails_maxClaimable");
    return value!.toBigInt();
  }

  set claimSettings_claimAmountDetails_maxClaimable(value: BigInt) {
    this.set(
      "claimSettings_claimAmountDetails_maxClaimable",
      Value.fromBigInt(value)
    );
  }

  get claimSettings_claimAmountDetails_totalClaimAmount(): BigInt {
    let value = this.get("claimSettings_claimAmountDetails_totalClaimAmount");
    return value!.toBigInt();
  }

  set claimSettings_claimAmountDetails_totalClaimAmount(value: BigInt) {
    this.set(
      "claimSettings_claimAmountDetails_totalClaimAmount",
      Value.fromBigInt(value)
    );
  }

  get claimSettings_claimAmountDetails_tokenIds(): Array<BigInt> {
    let value = this.get("claimSettings_claimAmountDetails_tokenIds");
    return value!.toBigIntArray();
  }

  set claimSettings_claimAmountDetails_tokenIds(value: Array<BigInt>) {
    this.set(
      "claimSettings_claimAmountDetails_tokenIds",
      Value.fromBigIntArray(value)
    );
  }

  get claimSettings_cooldownDetails_hasCooldownPeriod(): boolean {
    let value = this.get("claimSettings_cooldownDetails_hasCooldownPeriod");
    return value!.toBoolean();
  }

  set claimSettings_cooldownDetails_hasCooldownPeriod(value: boolean) {
    this.set(
      "claimSettings_cooldownDetails_hasCooldownPeriod",
      Value.fromBoolean(value)
    );
  }

  get claimSettings_cooldownDetails_cooldownPeriod(): BigInt {
    let value = this.get("claimSettings_cooldownDetails_cooldownPeriod");
    return value!.toBigInt();
  }

  set claimSettings_cooldownDetails_cooldownPeriod(value: BigInt) {
    this.set(
      "claimSettings_cooldownDetails_cooldownPeriod",
      Value.fromBigInt(value)
    );
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value!.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get claimContract(): Bytes {
    let value = this.get("claimContract");
    return value!.toBytes();
  }

  set claimContract(value: Bytes) {
    this.set("claimContract", Value.fromBytes(value));
  }
}

export class RoleAdminChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RoleAdminChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RoleAdminChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RoleAdminChanged", id.toString(), this);
    }
  }

  static load(id: string): RoleAdminChanged | null {
    return changetype<RoleAdminChanged | null>(
      store.get("RoleAdminChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get role(): Bytes {
    let value = this.get("role");
    return value!.toBytes();
  }

  set role(value: Bytes) {
    this.set("role", Value.fromBytes(value));
  }

  get previousAdminRole(): Bytes {
    let value = this.get("previousAdminRole");
    return value!.toBytes();
  }

  set previousAdminRole(value: Bytes) {
    this.set("previousAdminRole", Value.fromBytes(value));
  }

  get newAdminRole(): Bytes {
    let value = this.get("newAdminRole");
    return value!.toBytes();
  }

  set newAdminRole(value: Bytes) {
    this.set("newAdminRole", Value.fromBytes(value));
  }
}

export class RoleGranted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RoleGranted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RoleGranted must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RoleGranted", id.toString(), this);
    }
  }

  static load(id: string): RoleGranted | null {
    return changetype<RoleGranted | null>(store.get("RoleGranted", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get role(): Bytes {
    let value = this.get("role");
    return value!.toBytes();
  }

  set role(value: Bytes) {
    this.set("role", Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }
}

export class RoleRevoked extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RoleRevoked entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RoleRevoked must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RoleRevoked", id.toString(), this);
    }
  }

  static load(id: string): RoleRevoked | null {
    return changetype<RoleRevoked | null>(store.get("RoleRevoked", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get role(): Bytes {
    let value = this.get("role");
    return value!.toBytes();
  }

  set role(value: Bytes) {
    this.set("role", Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }
}

export class RollbackTokens extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RollbackTokens entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RollbackTokens must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RollbackTokens", id.toString(), this);
    }
  }

  static load(id: string): RollbackTokens | null {
    return changetype<RollbackTokens | null>(store.get("RollbackTokens", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimContract(): Bytes {
    let value = this.get("claimContract");
    return value!.toBytes();
  }

  set claimContract(value: Bytes) {
    this.set("claimContract", Value.fromBytes(value));
  }

  get rollbackAddress(): Bytes {
    let value = this.get("rollbackAddress");
    return value!.toBytes();
  }

  set rollbackAddress(value: Bytes) {
    this.set("rollbackAddress", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class ToggleClaim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ToggleClaim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ToggleClaim must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ToggleClaim", id.toString(), this);
    }
  }

  static load(id: string): ToggleClaim | null {
    return changetype<ToggleClaim | null>(store.get("ToggleClaim", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimContract(): Bytes {
    let value = this.get("claimContract");
    return value!.toBytes();
  }

  set claimContract(value: Bytes) {
    this.set("claimContract", Value.fromBytes(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }
}
